package com.homearound.www.homearound.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.homearound.www.homearound.db.MerchantJob;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MERCHANT_JOB".
*/
public class MerchantJobDao extends AbstractDao<MerchantJob, Long> {

    public static final String TABLENAME = "MERCHANT_JOB";

    /**
     * Properties of entity MerchantJob.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Distance = new Property(1, String.class, "distance", false, "DISTANCE");
        public final static Property Email = new Property(2, String.class, "email", false, "EMAIL");
        public final static Property Jobdetail = new Property(3, String.class, "jobdetail", false, "JOBDETAIL");
        public final static Property Jobstatus = new Property(4, String.class, "jobstatus", false, "JOBSTATUS");
        public final static Property Jobtitle = new Property(5, String.class, "jobtitle", false, "JOBTITLE");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property Timefinish = new Property(7, String.class, "timefinish", false, "TIMEFINISH");
        public final static Property Timepost = new Property(8, String.class, "timepost", false, "TIMEPOST");
    };


    public MerchantJobDao(DaoConfig config) {
        super(config);
    }
    
    public MerchantJobDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MERCHANT_JOB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DISTANCE\" TEXT," + // 1: distance
                "\"EMAIL\" TEXT," + // 2: email
                "\"JOBDETAIL\" TEXT," + // 3: jobdetail
                "\"JOBSTATUS\" TEXT," + // 4: jobstatus
                "\"JOBTITLE\" TEXT," + // 5: jobtitle
                "\"NAME\" TEXT," + // 6: name
                "\"TIMEFINISH\" TEXT," + // 7: timefinish
                "\"TIMEPOST\" TEXT);"); // 8: timepost
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MERCHANT_JOB\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MerchantJob entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(2, distance);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(3, email);
        }
 
        String jobdetail = entity.getJobdetail();
        if (jobdetail != null) {
            stmt.bindString(4, jobdetail);
        }
 
        String jobstatus = entity.getJobstatus();
        if (jobstatus != null) {
            stmt.bindString(5, jobstatus);
        }
 
        String jobtitle = entity.getJobtitle();
        if (jobtitle != null) {
            stmt.bindString(6, jobtitle);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String timefinish = entity.getTimefinish();
        if (timefinish != null) {
            stmt.bindString(8, timefinish);
        }
 
        String timepost = entity.getTimepost();
        if (timepost != null) {
            stmt.bindString(9, timepost);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public MerchantJob readEntity(Cursor cursor, int offset) {
        MerchantJob entity = new MerchantJob( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // distance
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // email
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // jobdetail
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // jobstatus
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // jobtitle
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // timefinish
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // timepost
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MerchantJob entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDistance(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEmail(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setJobdetail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setJobstatus(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setJobtitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTimefinish(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTimepost(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MerchantJob entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(MerchantJob entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
